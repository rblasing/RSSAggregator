@{
   Layout = "~/Views/Shared/_Layout.cshtml";
   ViewBag.Title = "News";
}

<style type="text/css">
   body {
      /*background-color: #f0f0f0;*/
   }
</style>
<table style="margin: 1%">
   <tr>
      <td style="width: 1%">
         <!-- circle with up arrow -->
         <svg height="30" width="30" version="1.1" xmlns="http://www.w3.org/2000/svg" onclick="fontInc();" >
            <circle cx="15" cy="15" r="14" stroke="#99BBEE" fill="#99BBEE"/>
            <polygon points="7,21 23,21 15,6" stroke="white" fill="white" />
         </svg>
      </td>
      <td style="width: 1%">
         <!-- circle with down arrow -->
         <svg height="30" width="30" version="1.1" xmlns="http://www.w3.org/2000/svg" onclick="fontDec();">
            <circle cx="15" cy="15" r="14" stroke="#99BBEE" fill="#99BBEE"/>
            <polygon points="7,9 23,9 15,24" stroke="white" fill="white" />
         </svg>
      </td>
      <td><div id="rsskeywords" onblur="updateKeywords();" contenteditable="true" placeholder="Search terms..." spellcheck="false"></div></td>
   </tr>
</table>


<div id="ssecontent"></div>

<template id="tItem">
   <div class="newitem">
      <div class='box'>
         <span class='feedname'></span>
         <span class='itemdate'>
            <label title=''></label>
         </span>
      </div>
      <a target='_blank' class='itemurl' href=''></a>
      <span class='itemdesc'></span>
   </div>
</template>

<script language="javascript" type="text/javascript">
   let fontPct = 100;
   let sseContent;
   let evSrc;


   // show/hide item description when tapped/clicked
   function toggleDesc(e)
   {
      let d = this.getElementsByClassName("itemdesc");
      let currentDisplay = d[0].style.display;

      if (isNullOrWhitespace(d[0].style.display))
         currentDisplay = document.defaultView.getComputedStyle(d[0], null)["display"];

      if (currentDisplay === "none")
         d[0].style.display = "block";
      else
         d[0].style.display = "none";
   }


   // allow user to select font size, and record that preference in local storage
   function fontInc()
   {
      fontPct += 10;
      localStorage.setItem("rssFontPct", fontPct);
      sseContent.style.fontSize = fontPct + "%";
   }


   function fontDec()
   {
      fontPct -= 10;

      if (fontPct == 0)
         fontPct = 10;

      localStorage.setItem("rssFontPct", fontPct);
      sseContent.style.fontSize = fontPct + "%";
   }


   // save keywords the user wants highlighted in local storage, and apply to content
   function updateKeywords()
   {
      let keywords = document.getElementById("rsskeywords").innerText;
      localStorage.setItem("rsskeywords", keywords);

      if (isNullOrWhitespace(keywords))
         return;

      for (let kIdx = 0; kIdx < sseContent.childNodes.length; kIdx++)
         highlight(sseContent.childNodes[kIdx]);
   }


   function highlight(item)
   {
      if (item.className != "newitem")
         item.className = "olditem";

      let keywords = document.getElementById("rsskeywords").innerText;

      if (isNullOrWhitespace(keywords))
         return;

      // split keywords on whitespace
      var searchTerms = keywords.match(/\S+/g)  ||  [];

      for (let hIdx = 0; hIdx < searchTerms.length; hIdx++)
      {
         if (isNullOrWhitespace(searchTerms[hIdx]))
            continue;

         let title = item.getElementsByClassName("itemurl")[0];
         let desc = item.getElementsByClassName("itemdesc")[0];

         if (title.innerHTML.toLowerCase().indexOf(searchTerms[hIdx].toLowerCase()) >= 0  ||
            desc.innerHTML.toLowerCase().indexOf(searchTerms[hIdx].toLowerCase()) >= 0)
         {
            item.className = "impitem";
         }
      }
   }


   // change date elements' labels from UTC to browser's local timezone
   function updateStamps()
   {
      for (let uIdx = 0; uIdx < sseContent.childNodes.length; uIdx++)
         updateStamp(sseContent.childNodes[uIdx]);
   }


   function updateStamp(item)
   {
      item.onclick = toggleDesc;
      var dateNodes = item.getElementsByClassName('itemdate');

      for (let dIdx = 0; dIdx < dateNodes.length; dIdx++)
      {
         let node = dateNodes[dIdx];
         let labels = node.getElementsByTagName('label');

         if (labels.length < 1)
            continue;

         //let stamp = new Date(labels[0].innerText);
         let stamp = new Date(labels[0].title);
         labels[0].title = stamp;
         let span = timeSpan(stamp);

         if (span.days < 1)
         {
            if (span.hours == 1)
               labels[0].innerText = "1 hour ago";
            else if (span.hours > 1)
               labels[0].innerText = span.hours + " hours ago";
            else if (span.minutes == 0)
               labels[0].innerText = "now";
            else if (span.minutes == 1)
               labels[0].innerText = "1 minute ago";
            else
               labels[0].innerText = span.minutes + " minutes ago";
         }
         else
            labels[0].innerText = shortDate(stamp);
      }
   }


   // infinite scroll of items
   if (document.body.touchmove != undefined) // check if the client has a touchscreen
      document.body.touchmove = onScroll;

   window.onscroll = onScroll;


   function onScroll()
   {
      // bottom of viewport
      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight)
      {
         let urls = sseContent.getElementsByClassName("itemurl");
         let lastUrl = urls[urls.length - 1].href;

         let dates = sseContent.getElementsByClassName("itemdate");
         let lastDate = dates[dates.length - 1].getElementsByTagName('label')[0].title;

         // get next 10 items older than the last one in the current visible content
         getOlderItemsFromDB(lastUrl, lastDate, 10, false).then(function (items)
         {
            for (let oIdx = 0; oIdx < items.length; oIdx++)
               addItemToContent(items[oIdx], "olditem", true);
         });
      }
   }


   function addItemToContent(item, className, bAppend)
   {
      // make use of the template element defined above, if the browser
      // supports it
      if (document.createElement("template").content)
      {
         let template = document.querySelector('#tItem');
         let clone = template.content.cloneNode(true);
         let div = clone.querySelector(".newitem");
         div.className = className;
         clone.querySelector(".feedname").textContent = item.feedName;
         clone.querySelector(".itemdesc").innerHTML = item.description;

         let e = clone.querySelector(".itemdate label");
         e.title = item.pubDate;
         e.textContent = item.pubDate;

         e = clone.querySelector(".itemurl");
         e.href = item.url;
         e.innerHTML = item.title;

         updateStamp(div);

         if (bAppend)
         {
            highlight(div);
            sseContent.appendChild(div);
         }
         else
            sseContent.insertBefore(div, sseContent.childNodes[0]);
      }
      else  // HTML5 templates are not supported by this browser
      {
         let newItemTemplate = `<div class='box'><span class='feedname'>" +
            "${item.feedName}</span><span class='itemdate'><label title=" +
            "'${item.pubDate}'>${item.pubDate}</label></span></div><a " +
            "target='_blank' class='itemurl' href='${item.url}'>${item.title}</a>" +
            "<span class='itemdesc'>${item.description}</span>`;

         let newNode = document.createElement("div");
         newNode.innerHTML = newItemTemplate;
         newNode.className = className;
         updateStamp(newNode);

         if (bAppend)
         {
            highlight(newNode);
            sseContent.appendChild(newNode);
         }
         else
            sseContent.insertBefore(newNode, sseContent.childNodes[0]);
      }
   }


   // SSE message event handler
   function esOnMessage(e)
   {
      try
      {
         // server will occasionally send comments to prevent connection timeout
         if (e.data == "nodata")
         {
            updateStamps();
            return;
         }

         console.log("event id: " + e.lastEventId);
         console.log("new message: " + e.data);

         updateKeywords();

         // set all existing items to olditem class, unless they contain keywords
         // which are important to the user
         for (let rsIdx = 0; rsIdx < sseContent.childNodes.length; rsIdx++)
         {
            if (sseContent.childNodes[rsIdx].className != "impitem")
               sseContent.childNodes[rsIdx].className = "olditem";
         }

         let newItems = JSON.parse(e.data);

         // insert new items to top of content
         for (let newIdx = 0; newIdx < newItems.length; newIdx++)
         {
            itemExists(newItems[newIdx].url).then(function (found)
            {
               if (!found)
               {
                  addItemToContent(newItems[newIdx], "newitem", false);
                  addItemToDB(newItems[newIdx]);
               }
            });

            updateStamps();
         }

         // cap content view to maxItems
         if (sseContent.childNodes.length > @ViewBag.maxItems)
         {
            for (let capIdx = sseContent.childNodes.length - 1; capIdx >= @ViewBag.maxItems; capIdx--)
               sseContent.removeChild(sseContent.childNodes[capIdx]);
         }

         // save DOM state so it can be reloaded if user navigates away, then back to this page
         window.location.hash = e.lastEventId;
         localStorage.setItem("sseContent", sseContent.innerHTML);
      }
      catch (e)
      {
         console.error("Failed to parse server event: " + e.data);
         console.error(e);
      }
   }


   function wireSSE()
   {
      // start listening for SSE messages (if supported by browser)

      // if unsupported, use item set provided by server
      if (window.EventSource == undefined)
      {
         let h = '@Html.Raw(ViewBag.topItems)';
         sseContent.innerHTML = h;

         return;
      }

      getMaxItemStamp().then(function (stamp)
      {
         // try to catchup on missed items, but only if on a LAN or WAN. Don't
         // waste cell data on this.
         // (for purposes of demonstrating usage of this draft API, we'll allow 4G
         // connnections to be treated as LAN. Hopefully, all browsers will
         // agree on a common implementation in the near future.)
         if (isOnLanWan(true)  &&  stamp != null)
         {
            getOlderItemsFromDB("", (new Date()), 50, true).then(function (items)
            {
               for (let oIdx = 0; oIdx < items.length; oIdx++)
                  addItemToContent(items[oIdx], "olditem", true);
            });

            evSrc = new EventSource("@ViewBag.sseUri" + "?Last-Event-Id=" + stamp);
         }
         else
         {
            let h = '@Html.Raw(ViewBag.topItems)';
            sseContent.innerHTML = h;
            evSrc = new EventSource("@ViewBag.sseUri");
         }

         evSrc.addEventListener("helo", function (e)
         {
            console.log("SSE: HELO message received");
         }, false);

         evSrc.addEventListener("log", function (e)
         {
            try
            {
               sseContent.innerHTML = e.data;
            }
            catch (e)
            {
               console.error("Failed to parse server event: " + e.data);
               console.error(e);
            }
         }, false);

         // new SSE message received from server
         evSrc.addEventListener("message", esOnMessage, false);

         evSrc.addEventListener("open", function (e)
         {
            console.log("SSE: connection opened");
         }, false);

         evSrc.addEventListener("error", function (e)
         {
            if (e.target.readyState == EventSource.CLOSED)
               console.log("SSE: connection closed");
            else if (e.target.readyState == EventSource.CONNECTING)
               console.log("SSE: reconnecting");
            else
               console.error(e);
         }, false);
      });
   }


   // wire everything up
   window.onload = function ()
   {
      sseContent = document.getElementById("ssecontent");

      // clear hash if user refreshes the page
      if (pageAccessedByReload())
         window.location.hash = "";

      // restore DOM state if the user navigated away, then back to this page
      if (window.location.hash)
         sseContent.innerHTML = localStorage.getItem("sseContent");

      // apply user preferences
      let initPct = localStorage.getItem("rssFontPct");

      if (initPct != null)
      {
         fontPct = parseInt(initPct);
         sseContent.style.fontSize = initPct + "%";
      }

      let initKeywords = localStorage.getItem("rsskeywords");

      if (initKeywords != null)
      {
         document.getElementById("rsskeywords").innerText = initKeywords;
         updateKeywords();
      }

      updateStamps();

      // create local DB, if it doesn't already exist
      createDB().then(() =>
      {
         wireSSE();
      });
   };
</script>