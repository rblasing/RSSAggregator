<?xml version="1.0" encoding="utf-8"?>

<wsdl:definitions
   xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
   xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
   xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl"
   xmlns:xsl="http://www.w3.org/2001/XMLSchema"
   targetNamespace="http://blasingame/RSS.xsd"
   xmlns:tns="http://blasingame/RSS.xsd"
   xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
   <wsdl:types>
      <xsl:schema elementFormDefault="qualified" attributeFormDefault="qualified" targetNamespace="http://blasingame/RSS.xsd">
         <xsl:complexType name="Item">
            <xsl:annotation>
               <xsl:documentation>
                  This type represents a single news article. The <c>pubDate</c>
                  element will be represented as UTC.
               </xsl:documentation>
            </xsl:annotation>
            <xsl:sequence>
               <xsl:element name="title" type="xsl:string" />
               <xsl:element name="publisher" type="xsl:string" />
               <xsl:element name="pubDate" type="xsl:dateTime" />
               <xsl:element name="description" type="xsl:string" />
               <xsl:element name="link" type="xsl:anyURI" />
            </xsl:sequence>
         </xsl:complexType>

         <xsl:complexType name="ItemList">
            <xsl:sequence>
               <xsl:element name="item" type="tns:Item" minOccurs="1" maxOccurs="unbounded" />
            </xsl:sequence>
         </xsl:complexType>

         <xsl:element name="getTopItemsRequest">
            <xsl:annotation>
               <xsl:documentation>
                  A service request which allows the client to retrieve the
                  newest N (max 500) articles. They will be sorted by <c>pubDate</c>,
                  ascending.
               </xsl:documentation>
            </xsl:annotation>
            <xsl:complexType>
               <xsl:sequence>
                  <xsl:element name="itemCount">
                     <xsl:simpleType>
                        <xsl:restriction base="xsl:nonNegativeInteger">
                           <xsl:maxInclusive value="500" />
                        </xsl:restriction>
                     </xsl:simpleType>
                  </xsl:element>
               </xsl:sequence>
            </xsl:complexType>            
         </xsl:element>
         
         <xsl:element name="getItemsByRangeRequest">
            <xsl:annotation>
               <xsl:documentation>
                  This request allows the client to retrieve a list of articles
                  possessing a <c>pubDate</c> value between <c>minDateTime</c>
                  and <c>maxDateTime</c>, inclusively. <c>minDateTime</c> must
                  be earlier than <c>maxDateTime</c>.  Both must be submitted
                  as UTC values.
               </xsl:documentation>
            </xsl:annotation>
            <xsl:complexType>
               <xsl:sequence>
                  <xsl:element name="minDateTime" type="xsl:dateTime" />
                  <xsl:element name="maxDateTime" type="xsl:dateTime" />
                  <!-- xsl:assert test="@minDateTime &lt; @maxDateTime" / -->
               </xsl:sequence>
            </xsl:complexType>            
         </xsl:element>

         <xsl:element name="getItemsByKeywordRequest">
            <xsl:annotation>
               <xsl:documentation>
                  The client may use this request to retrieve a list of articles
                  whose <c>title</c> or <c>description</c> element contains the
                  specified keyword (case insensitively).
               </xsl:documentation>
            </xsl:annotation>
            <xsl:complexType>
               <xsl:sequence>
                  <xsl:element name="keyword" type="xsl:string" />
               </xsl:sequence>
            </xsl:complexType>            
         </xsl:element>

         <xsl:element name="getItemsResponse">
            <xsl:annotation>
               <xsl:documentation>
                  This response element is returned by all service requests. If
                  the <c>error</c> element is present, then any data contained
                  in the <c>items</c> element should be considered invalid. It
                  is possible neither element will be returned, in which case
                  the service request's execution may be assumed to have completed
                  successfully, and to have located no eligible articles.
               </xsl:documentation>
            </xsl:annotation>
            <xsl:complexType>
               <xsl:sequence>
                  <xsl:element name="items" type="tns:ItemList" minOccurs="0" />
                  <xsl:element name="error" type="tns:WSError" minOccurs="0" />
               </xsl:sequence>
            </xsl:complexType>            
         </xsl:element>

         <xsl:complexType name="WSBoolResponse">
            <xsl:annotation>
               <xsl:documentation>
                  The 'error' element will only be present if 'successful' is false.
               </xsl:documentation>
            </xsl:annotation>
            <xsl:sequence>
               <xsl:element name="successful" type="xsl:boolean" />
               <xsl:element name="error" type="tns:WSError" minOccurs="0" />
            </xsl:sequence>
         </xsl:complexType>

         <xsl:complexType name="WSError">
            <xsl:annotation>
               <xsl:documentation>
                  <p>
                     Houses details related to a specific error encountered by one of
                     this web service's methods. The 'code' and 'description' elements
                     will be populated based on the value of the 'type' element. As
                     an example, if 'type' is equal to 'Database', then 'code' will
                     contain the DBMS-specific error code (ex. ORA-01110), while
                     'description' will contain the DBMS-specific error message. If
                     'type' is equal to 'InvalidArgument', then 'code' will contain
                     the name of the argument whose value has been identified as
                     invalid, and 'description' will explain why the value is
                     considered invalid.
                  </p>
                  <p>
                     If 'resubmit' is true, then it is safe to retry the operation
                     using the same input data.  It will usually be set true when
                     'type' is 'Database' or 'Unavailable' (planned outage).
                  </p>
                  <p>
                     If 'type' is 'Unavailable' and the cause of the unavailability
                     is system throttling, the 'code' value will be the number of
                     seconds remaining before a subsequent call will be accepted.
                  </p>
               </xsl:documentation>
            </xsl:annotation>
            <xsl:sequence>
               <xsl:element name="type" type="tns:WSErrorType" />
               <xsl:element name="resubmit" type="xsl:boolean" />
               <xsl:element name="code" type="xsl:string" minOccurs="0" />
               <xsl:element name="description" type="xsl:string" minOccurs="0" />
            </xsl:sequence>
         </xsl:complexType>

         <xsl:simpleType name="WSErrorType">
            <xsl:restriction base="xsl:string">
               <xsl:enumeration value="Database" />
               <xsl:enumeration value="InvalidArgument" />
               <xsl:enumeration value="Security" />
               <xsl:enumeration value="Unavailable" />
               <xsl:enumeration value="Unknown" />
            </xsl:restriction>
         </xsl:simpleType>

      </xsl:schema>
   </wsdl:types>


   <wsdl:message name="getTopItemsSoapIn">
      <wsdl:part name="parameters" element="tns:getTopItemsRequest" />
   </wsdl:message>
   <wsdl:message name="getTopItemsSoapOut">
      <wsdl:part name="parameters" element="tns:getItemsResponse" />
   </wsdl:message>

   <wsdl:message name="getItemsByRangeSoapIn">
      <wsdl:part name="parameters" element="tns:getItemsByRangeRequest" />
   </wsdl:message>
   <wsdl:message name="getItemsByRangeSoapOut">
      <wsdl:part name="parameters" element="tns:getItemsResponse" />
   </wsdl:message>

   <wsdl:message name="getItemsByKeywordSoapIn">
      <wsdl:part name="parameters" element="tns:getItemsByKeywordRequest" />
   </wsdl:message>
   <wsdl:message name="getItemsByKeywordSoapOut">
      <wsdl:part name="parameters" element="tns:getItemsResponse" />
   </wsdl:message>


   <wsdl:portType name="RSS">
      <wsdl:operation name="getTopItems">
         <wsdl:input message="tns:getTopItemsSoapIn" wsaw:Action="http://blasingame/getTopItems" />
         <wsdl:output message="tns:getTopItemsSoapOut" wsaw:Action="http://blasingame/getTopItemsResponse" />
      </wsdl:operation>

      <wsdl:operation name="getItemsByRange">
         <wsdl:input message="tns:getItemsByRangeSoapIn" wsaw:Action="http://blasingame/getItemsByRange" />
         <wsdl:output message="tns:getTopItemsSoapOut" wsaw:Action="http://blasingame/getItemsByRangeResponse" />
      </wsdl:operation>

      <wsdl:operation name="getItemsByKeyword">
         <wsdl:input message="tns:getItemsByKeywordSoapIn" wsaw:Action="http://blasingame/getItemsByKeyword" />
         <wsdl:output message="tns:getTopItemsSoapOut" wsaw:Action="http://blasingame/getItemsByKeywordResponse" />
      </wsdl:operation>
   </wsdl:portType>


   <wsdl:binding name="RSSBinding" type="tns:RSS">
      <soap:binding transport="http://schemas.xmlsoap.org/soap/http" />
      <wsdl:operation name="getTopItems">
         <soap:operation soapAction="http://blasingame/getTopItems" style="document" />
         <wsdl:input>
            <soap:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use="literal" />
         </wsdl:output>
      </wsdl:operation>

      <wsdl:operation name="getItemsByRange">
         <soap:operation soapAction="http://blasingame/getItemsByRange" style="document" />
         <wsdl:input>
            <soap:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use="literal" />
         </wsdl:output>
      </wsdl:operation>

      <wsdl:operation name="getItemsByKeyword">
         <soap:operation soapAction="http://blasingame/getItemsByKeyword" style="document" />
         <wsdl:input>
            <soap:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap:body use="literal" />
         </wsdl:output>
      </wsdl:operation>
   </wsdl:binding>

   
   <wsdl:binding name="RSSBinding12" type="tns:RSS">
      <soap12:binding transport="http://schemas.xmlsoap.org/soap/http" />
      <wsdl:operation name="getTopItems">
         <soap12:operation soapAction="http://blasingame/getTopItems" soapActionRequired="true" style="document" />
         <wsdl:input>
            <soap12:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap12:body use="literal" />
         </wsdl:output>
      </wsdl:operation>
      <wsdl:operation name="getItemsByRange">
         <soap12:operation soapAction="http://blasingame/getItemsByRange" soapActionRequired="true" style="document" />
         <wsdl:input>
            <soap12:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap12:body use="literal" />
         </wsdl:output>
      </wsdl:operation>
      <wsdl:operation name="getItemsByKeyword">
         <soap12:operation soapAction="http://blasingame/getItemsByKeyword" soapActionRequired="true" style="document" />
         <wsdl:input>
            <soap12:body use="literal" />
         </wsdl:input>
         <wsdl:output>
            <soap12:body use="literal" />
         </wsdl:output>
      </wsdl:operation>
   </wsdl:binding>
         

   <wsdl:service name="RSSService">
      <wsdl:port name="RSSPort" binding="tns:RSSBinding">
         <soap:address location="http://localhost:64542/RSSService.svc" />
      </wsdl:port>
      <wsdl:port name="RSSPort12" binding="tns:RSSBinding12">
         <soap12:address location="http://localhost:64542/RSSService.svc" />
      </wsdl:port>
   </wsdl:service>
</wsdl:definitions>
